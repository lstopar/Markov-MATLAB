function [Q1, J1, ht1] = ctmc_join(Q, join_v)
    n1 = length(join_v);
    
    
    n = size(Q,1);
    
    % prepare the setup
    join = sort(join);
    
    idxs = 1:n;
    idxs(join(2)) = [];
%     idxs(join(2)) = -1;
%     for i = join(2)+1:n
%         idxs(i) = i-1;
%     end
    
    % do the work
    J = jump_matrix(Q);
    ht = holding_times(Q);
    p = ctmc_stationary(Q);
    
    % compute the jump matrix
    J1 = zeros(n-1);
    for i = 1:n-1
        if i == join(1)
            p1 = zeros(1,n);
            for j = 1:n
                p1(j) = (p(join(1))*J(join(1),j) + p(join(2))*J(join(2),j)) / sum(p(join));
            end
            
            p1(idxs(join(1))) = sum(p1(join));
            p1(join(2)) = [];
            J1(i,:) = p1;
        else
            p1 = zeros(1,n-1);
            for j = 1:n-1
                p1(j) = J(idxs(i),idxs(j));
            end
            p1(join(1)) = J(idxs(i),join(1)) + J(idxs(i),join(2));
            J1(i,:) = p1;
        end
    end
    
    ht1 = zeros(1,n-1);
    for i = 1:n-1
        ht1(i) = -1/Q(idxs(i),idxs(i));
    end
    
    % holding times
    ht1(join(1)) = -1/(Q(join(1),join(1)) + Q(join(2),join(2)));
    
    % Q-matrix
    Q1 = zeros(n-1);
    for i = 1:n-1
        Q1(i,i) = -1/ht1(i);
        for j = 1:n-1
            if j ~= i
                Q1(i,j) = -Q1(i,i)*J1(i,j);
            end
        end
    end
end