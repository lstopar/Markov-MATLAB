%% generate test data
n = 7;
eps = 1e-2;
Q = [];

% states aggregated states will be [1,2],[3,4,5],[6,7]

Q(1,2) = 10;
Q(2,1) = 8;
Q(2,3) = eps;
Q(3,2) = eps;
Q(3,4) = 5;
Q(4,3) = 10;
Q(4,5) = 7;
Q(5,4) = 5;
Q(5,3) = 9;
Q(5,7) = eps;
Q(7,5) = eps;
Q(7,6) = 140;
Q(6,7) = 100;

Q = Q - diag(sum(Q,2));

state_sets = java.util.ArrayList;
state_sets.add(java.util.ArrayList);
state_sets.add(java.util.ArrayList);
state_sets.add(java.util.ArrayList);
state_sets.get(0).add(1);
state_sets.get(0).add(2);
state_sets.get(1).add(3);
state_sets.get(1).add(4);
state_sets.get(1).add(5);
state_sets.get(2).add(6);
state_sets.get(2).add(7);

P = projection_matrix(state_sets);
Pi = diag(ctmc_stationary(Q));

[U,S,V] = svd(Q);
U = U(:,1:n-1);
S = S(1:n-1,1:n-1);
V = V(:,1:n-1);
Q_inv = V*diag(1 ./ diag(S))*U';

Q_test = [-10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,-10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000; 3556.283603143034270,0.000000000000000,-24230.429711373013561,10000.000000000000000,0.000000000000000,0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,674.146108229980541,0.000000000000000; 10000.000000000000000,0.000000000000000,0.000000000000000,-19246.032940295022854,0.000000000000000,0.000000000000000,0.000000000000000,9246.032940295021035,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,0.000000000000000,7145.556447484349519,0.000000000000000,-17145.556447484348610,10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000,-10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,5328.164864291387858,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,-15328.164864291387858,0.000000000000000,0.000000000000000,0.000000000000000,10000.000000000000000,0.000000000000000; 0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,10000.000000000000000,3886.960750982686932,0.000000000000000,-13886.960750982687387,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,0.000000000000000,1659.386143318798531,0.000000000000000,0.000000000000000,10000.000000000000000,10000.000000000000000,0.000000000000000,-21659.386143318799441,0.000000000000000,0.000000000000000,0.000000000000000; 0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,5187.083292592281396,-15187.083292592280486,0.000000000000000,10000.000000000000000; 0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,0.000000000000000,7708.899735968645473,-17708.899735968647292,0.000000000000000; 0.000000000000000,0.000000000000000,1227.335421397075834,0.000000000000000,0.000000000000000,10000.000000000000000,4034.249755477484086,0.000000000000000,10000.000000000000000,0.000000000000000,0.000000000000000,-25261.585176874559693];
state_sets_test = java.util.ArrayList;
state_sets_all = java.util.ArrayList;

state_sets_test.add(java.util.ArrayList);
state_sets_test.add(java.util.ArrayList);
state_sets_test.add(java.util.ArrayList);

state_sets_all.add(java.util.ArrayList);

state_sets_test.get(0).add(2);
state_sets_test.get(0).add(7);
state_sets_test.get(0).add(9);
state_sets_test.get(0).add(10);
state_sets_test.get(0).add(11);
state_sets_test.get(0).add(12);

state_sets_test.get(1).add(3);
state_sets_test.get(1).add(5);
state_sets_test.get(1).add(6);

state_sets_test.get(2).add(1);
state_sets_test.get(2).add(4);
state_sets_test.get(2).add(8);

for i = 1:12
    state_sets_all.get(0).add(i);
%     Q_test(i,i) = 0;
end

n_large = 30;
Q_large = rand(n_large)*100;
for i = 1:n_large
    Q_large(i,i) = 0;
end
Q_large = Q_large - diag(sum(Q_large,2));

% Q_test = Q_test - diag(sum(Q_test,2));